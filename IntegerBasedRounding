import java.util.Arrays;

public class IntegerBasedRounding {

	public static void main(String[] args) {
		int[] test1= {1,2,3,4,5};
		int[] test2= {1,2,3,4,5};
		int[] test3= {1,2,3,4,5};
		int[] test4= {-1,-2,-3,-4,-5};
		int[] test5= {-18,1,2,3,4,5};
		int[] test6= {1,2,3,4,5};
		int[] test7= {1,2,3,4,5};
		doIntegerBasedRounding(test1,2);
		doIntegerBasedRounding(test2,3);
		doIntegerBasedRounding(test3,-3);
		doIntegerBasedRounding(test4,3);
		doIntegerBasedRounding(test5,4);
		doIntegerBasedRounding(test6,5);
		doIntegerBasedRounding(test7,100);
		System.out.println(Arrays.toString(test1));
		System.out.println(Arrays.toString(test2));
		System.out.println(Arrays.toString(test3));
		System.out.println(Arrays.toString(test4));
		System.out.println(Arrays.toString(test5));
		System.out.println(Arrays.toString(test6));
		System.out.println(Arrays.toString(test7));
		
/*Define the n-based integer rounding of an integer k to be the nearest multiple of n to k. If two multiples 
of n are equidistant use the greater one. For example 
the 4-based rounding of 5 is 4 because 5 is closer to 4 than it is to 8, 
the 5-based rounding of 5 is 5 because 5 is closer to 5 that it is to 10, 
the 4-based rounding of 6 is 8 because 6 is equidistant from 4 and 8, so the greater one is used, 
the 13-based rounding of 9 is 13, because 9 is closer to 13 than it is to 0, 

Write a function named doIntegerBasedRounding that takes an integer array and rounds all its positive 
elements using n-based integer rounding. 
A negative element of the array is not modified and if n <=0, no elements of the array are modified. 
Finally you may assume that the array has at least two elements. 
Hint: In integer arithmetic, (6/4) * 4 = 4 
		 */

	}
	static void doIntegerBasedRounding(int[] a, int n){
        if(n <= 0) return;
        for(int i = 0;i<a.length;i++){
            if(a[i] >= 0){
                int lowerBound = (a[i]/n)*n;
                int upperBound = lowerBound +n;
                int middleElement = n%2==0 ? lowerBound + n/2 : lowerBound + n/2 +1;
                if(a[i] >= middleElement) a[i] = upperBound;
                else a[i] = lowerBound;
            }
        }
}

}
